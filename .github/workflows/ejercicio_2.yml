name: "Solucion del ejercicio practico #2"

on:
  workflow_dispatch:
    inputs:
      mes:
        description: "Mes de los eventos"
        required: true
        type: choice
        options:
          - "01"
          - "02"
          - "03"
          - "04"
          - "05"
          - "06"
          - "07"
          - "08"
          - "09"
          - "10"
          - "11"
          - "12"
      dia:
        description: "Dia de los eventos"
        required: true
        type: choice
        options:
          - "01"
          - "02"
          - "03"
          - "04"
          - "05"
          - "06"
          - "07"
          - "08"
          - "09"
          - "10"
          - "11"
          - "12"
          - "13"
          - "14"
          - "15"
          - "16"
          - "17"
          - "18"
          - "19"
          - "20"
          - "21"
          - "22"
          - "23"
          - "24"
          - "25"
          - "26"
          - "27"
          - "28"
          - "29"
          - "30"
          - "31"

env:
  DIA: ${{ inputs.dia }}
  MES: ${{ inputs.mes }}
  LANG: ${{ vars.LANG }}

jobs:
  consumir-api:
    name: Consumo del api de eventos
    runs-on: ubuntu-latest
    outputs:
      eventos: ${{ steps.paralelos.outputs.eventos }}
    steps:
      - name: Buscar y traer respuesta del cache
        id: cache
        uses: actions/cache@v4
        with:
          path: matrix
          key: api-${{ env.DIA }}-${{ env.MES }}
      - name: Consumir API de LÃ­nea de Tiempo
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          RESPONSE=$(curl --silent --location "https://api.wikimedia.org/feed/v1/wikipedia/${{env.LANG}}/onthisday/all/${{env.MES}}/${{env.DIA}}")
          mkdir -p matrix
          echo "$RESPONSE" | jq -c --arg DAY "$DAY" --arg MONTH "$MONTH" \
            '.selected[] | {url: .pages[0].content_urls.desktop.page, title: .pages[0].title }' \
            > matrix/eventos.json

      - name: Guardar eventos para matrix
        id: paralelos
        run: |
          JSON=$(jq -s -c '.' matrix/eventos.json)
          echo "eventos=$JSON" >> $GITHUB_OUTPUT

  exportar-pdf:
    name: Tomar el pirmer elemento HTML, transformarlo en PDF y exportarlo
    runs-on: ubuntu-latest
    needs: consumir-api
    timeout-minutes: 5
    strategy:
      fail-fast: false
      matrix:
        evento: ${{ fromJSON(needs.consumir-api.outputs.eventos) }}
    steps:
      - name: Obtener url y titulo del arreglo
        run: |
          URL="${{ matrix.evento.url }}"
          TITLE="${{ matrix.evento.title }}"
          echo "TITLE=$TITLE" >> GITHUB_ENV
          echo "URL=$URL" >> GITHUB_ENV
      - name: html to pdf
        uses: misaelnieto/web_to_pdf_action@master
        with:
          webPageURL: ${{ env.URL }}
          outputFile: ${{ env.MES }}-${{ env.DIA }}-${{ env.TITLE }}.pdf
          usePuppeteer: true
          pdfOptions: '{"format": "Letter", "margin": {"top": "10mm", "left": "10mm", "right": "10mm", "bottom": "10mm"}}'
      - name: Exportar PDF como artefacto
        uses: actions/upload-artifact@v4
        with:
          retention-days: 1
          name: ${{ env.MES }}-${{ env.DIA }}-${{ env.TITLE }}
          path: ${{ env.MES }}-${{ env.DIA }}-${{ env.TITLE }}.pdf
